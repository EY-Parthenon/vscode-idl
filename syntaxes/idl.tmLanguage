<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>pro</string>
	</array>
	<key>firstLineMatch</key>
	<string>-[*]-( Mode:)? IDL -[*]-</string>
	<key>keyEquivalent</key>
	<string>^~@i</string>
	<key>name</key>
	<string>IDL</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>(?ix)
			(?=(function|pro)\b) # borrowed from ruby bundle
			(?&lt;=^|\s)(function|pro)\s+ # the function keyword
			(?&gt;\[(.*)\])? # match various different combination of output arguments
			((?&gt;[a-z_][a-z_$0-9]*))?
			(?&gt;\s*=\s*)?
			((?&gt;[a-z_][a-z_$0-9]*(::[a-z_][a-z_$0-9]*)?(?&gt;[?!]|=(?!&gt;))? )) # the function name
			</string>
			<key>name</key>
			<string>meta.function.idl</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.idl</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.idl</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.output.function.idl</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.output.function.idl</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.idl</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>include</key>
			<string>#constants_override</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#brackets</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#curlybrackets</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#float</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#integer</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#string</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#operators</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#all_idl_keywords_except_procedures</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#idl_procedures</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#all_idl_comments</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>all_idl_keywords_except_procedures</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#idl_operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#idl_storage_type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#idl_sysvar</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#idl_functions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#idl_control_statements</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#idl_structures</string>
				</dict>
			</array>
		</dict>
		<key>allofem</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#curlybrackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#end_in_parens</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#idl_structures</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#all_idl_keywords_except_procedures</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#idl_procedures</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#all_idl_comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#float</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#integer</string>
				</dict>
			</array>
		</dict>
		<key>all_idl_comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.divider.idl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^;(=)\s*$\n</string>
					<key>name</key>
					<string>comment.line.banner.divider.idl</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.line.idl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^\s*;=\s*(.*?)\s*$\n?</string>
					<key>name</key>
					<string>comment.line.banner.idl</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.idl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\n</string>
					<key>name</key>
					<string>comment.line.semicolon.idl</string>
				</dict>
			</array>
		</dict>
		<key>brackets</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brackets.idl</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.brackets.idl</string>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brackets.idl</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#allofem</string>
				</dict>
			</array>
		</dict>
		<key>end_in_parens</key>
		<dict>
			<key>comment</key>
			<string>end as operator symbol</string>
			<key>match</key>
			<string>\bend\b</string>
			<key>name</key>
			<string>keyword.operator.symbols.idl</string>
		</dict>
		<key>escaped_quote</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(\\|[abefnprtv'"?]|[0-3]\d{0,2}|[4-7]\d?|x[a-zA-Z0-9]+)</string>
					<key>name</key>
					<string>constant.character.escape.idl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unknown-escape.idl</string>
				</dict>
			</array>
		</dict>
		<key>float</key>
		<dict>
			<key>comment</key>
			<string>Valid numbers: .1, 1.1, .1e1, 1.1e1, 1e1, .1d1, 1.1d1, 1d1</string>
			<key>match</key>
			<string>(?i)\b(\.\d+|\d+\.?\d*)([ed][\+-]?\d*)?\b</string>
			<key>name</key>
			<string>constant.numeric.idl</string>
		</dict>
		<key>idl_control_statements</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Control keywords</string>
					<key>match</key>
					<string>(?i)(?&lt;!\.)\b(begin|break|case|common|compile_opt|continue|do|else|end|endcase|endelse|endfor|endforeach|endif|endrep|endswitch|endwhile|for|foreach|forward_function|goto|if|inherits|of|on_ioerror|repeat|switch|then|until|while)\b</string>
					<key>name</key>
					<string>keyword.control.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Operator keywords</string>
					<key>match</key>
					<string>(?i)(?&lt;!\.)\b(and|eq|ge|gt|le|lt|mod|ne|not|or|xor)\b</string>
					<key>name</key>
					<!-- shoul say keyword.operator.idl, but there is no highlighting if we do that -->
					<string>keyword.control.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>goto jump statement with comment</string>
					<key>match</key>
					<string>(?i)^\s*([a-z_][a-z0-9_$\s]*)(?=:\s*;.*$)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>goto jump statement without comment</string>
					<key>match</key>
					<string>(?i)^\s*([a-z_][a-z0-9_$\s]*):\s*$</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>idl_operator</key>
		<dict>
			<key>comment</key>
			<string>Operator symbols</string>
			<key>match</key>
			<string>(?i)(&gt;|&lt;|&amp;&amp;|\?|:|\||\|\||\+|-|\*|\.\*|/|\./|\\|\.\\|\^|\.\^)</string>
			<key>name</key>
			<string>keyword.operator.symbols.idl</string>
		</dict>
		<key>idl_storage_type</key>
		<dict>
			<key>comment</key>
			<string>Storage types</string>
			<key>match</key>
			<string>(?i)(?&lt;!\.)\b(function|pro)\s</string>
			<key>name</key>
			<string>storage.type.idl</string>
		</dict>
		<key>idl_routine_keywords</key>
		<dict>
			<key>comment</key>
			<string>IDL routine keywords with boolean values</string>
			<key>match</key>
			<string>(?i)(?<![a-z0-9.])((?<=\(|\s|,)\/\s*[a-z_][a-z0-9_$]*)</string>
			<key>name</key>
			<string>entity.name.tag</string>
		</dict>
		<key>idl_sysvar</key>
		<dict>
			<key>comment</key>
			<string>IDL system variables</string>
			<key>match</key>
			<string>(?i)\![a-z_][a-z0-9_$]*\b</string>
			<key>name</key>
			<string>constant.language.idl</string>
		</dict>
		<!-- <key>idl_line_continuation_blocks</key>
		<dict>
			<key>comment</key>
			<string>IDL Code Continuation Blocks</string>
			<key>begin</key>
			<string>(?i)(?<![a-z0-9_])\$</string>
			<key>end</key>
			<string>^((?!\$).)*$</string> or the one on the next line
			<string>^((?!((?<![a-z0-9_])\$.*\n)).)*$</string>
			<key>name</key>
			<string>meta.variable.other.valid.idl</string>
		</dict> -->
		<!-- <key>idl_line_continuation_blocks</key>
		<dict>
			<key>comment</key>
			<string>IDL Code Continuation Blocks</string>
			<key>begin</key>
			<string>(?i)(?<![a-z0-9_])\$.*\n</string>
			<key>end</key>
			<string>(?i)^((?!((?<![a-z0-9_])\$.*\n)).)*$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#all_idl_keywords_except_procedures</string>
				</dict>
			</array>
		</dict> -->
		<key>idl_functions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>IDL Function Methods</string>
					<key>match</key>
					<string>(?i)(?<=\.)[a-z_][a-z0-9_$]*(?=\()</string>
					<key>name</key>
					<string>support.function.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>IDL Functions</string>
					<key>match</key>
					<string>(?i)\b[a-z_][a-z0-9_$]*(?=\()</string>
					<key>name</key>
					<string>support.function.idl</string>
				</dict>
			</array>
		</dict>
		<key>idl_procedures</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>IDL Procedure Methods with args/keywords</string>
					<key>match</key>
					<string>(?i)(^\s*[a-z_][a-z0-9_$]*\.)([a-z_][a-z0-9_$]*(?=\,))</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.idl</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>IDL Procedure Methods with nothing on the line</string>
					<key>match</key>
					<string>(?i)(^\s*[a-z_][a-z0-9_$]*\.)([a-z_][a-z0-9_$]*)(\s*)$</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.idl</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>IDL Procedure Methods with comment after</string>
					<key>match</key>
					<string>(?i)(^\s*[a-z_][a-z0-9_$]*\.)([a-z_][a-z0-9_$]*)(?=\s*;.*)</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.idl</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>IDL Procedures with args/keywords</string>
					<key>match</key>
					<string>(?i)^\s*(?!and|eq|ge|gt|le|lt|mod|ne|not|or|xor|begin|break|case|common|compile_opt|continue|do|else|end|endcase|endelse|endfor|endforeach|endif|endrep|endswitch|endwhile|for|foreach|forward_function|goto|if|inherits|of|on_ioerror|repeat|switch|then|until|while)[a-z_][a-z0-9_$]*(?=\,)</string>
					<key>name</key>
					<string>support.function.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>IDL Procedures with no arguments or keywords</string>
					<key>match</key>
					<string>(?i)^(\s*)(?!and|eq|ge|gt|le|lt|mod|ne|not|or|xor|begin|break|case|common|compile_opt|continue|do|else|end|endcase|endelse|endfor|endforeach|endif|endrep|endswitch|endwhile|for|foreach|forward_function|goto|if|inherits|of|on_ioerror|repeat|switch|then|until|while)([a-z_][a-z_$]*)(\s*)$</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.idl</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>IDL Procedures with no arguments or keywords and comment</string>
					<key>match</key>
					<string>(?i)^(\s*)(?!and|eq|ge|gt|le|lt|mod|ne|not|or|xor|begin|break|case|common|compile_opt|continue|do|else|end|endcase|endelse|endfor|endforeach|endif|endrep|endswitch|endwhile|for|foreach|forward_function|goto|if|inherits|of|on_ioerror|repeat|switch|then|until|while)([a-z_][a-z_$]*)(?=\s*;.*)</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.idl</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>idl_structures</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Structure names</string>
					<key>match</key>
					<string>(?i)({\s*)([a-z_][a-z0-9_$]*\s*(?=,|}))</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>Structure/object inheritances</string>
					<key>match</key>
					<string>(?i)(\s*inherits\s+)([a-z_][a-z0-9_$]*\s*(?=,|}|\n))</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#idl_control_statements</string>
								</dict>
							</array>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>Structure tag/property name declarations</string>
					<key>match</key>
					<string>(?i)(\s*|{\s*)([a-z_][a-z0-9_$]*\s*(?!:\s*begin)(?=:))</string>
					<key>name</key>
					<string>entity.name.tag</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Accessing properties (structures or objects) does not work if within structure definition tag</string>
					<key>match</key>
					<string>(?i)([:~=\*/(\-+,]\s*)([!a-z_][a-z0-9_$]*\.)(?![a-z_][a-z0-9_$]*(?=\())([a-z_][a-z0-9_$]*)</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#idl_sysvar</string>
								</dict>
							</array>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>Accessing properties with mod operator before</string>
					<key>match</key>
					<string>(?i)(mod\s+)([a-z_][a-z0-9_$]*\.)(?![a-z_][a-z0-9_$]*(?=\())([a-z_][a-z0-9_$]*)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.idl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>Accessing properties of properties or indexing properties</string>
					<key>match</key>
					<string>(?i)(?<=\.)[a-z_][a-z0-9_$]*(?=[\.\[])</string>
					<key>name</key>
					<string>entity.name.tag</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Setting properties</string>
					<key>match</key>
					<string>(?i)(\s*)([!a-z_][a-z0-9_$]*\.)([a-z_][a-z0-9_$]*)(?=\s*=)</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#idl_sysvar</string>
								</dict>
							</array>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>integer</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Valid binary integers: '1001'b, '1001'bl, etc.</string>
					<key>match</key>
					<string>(?i)'[01]+'b(b|s|u|us|l|ul|ll|ull)?\b</string>
					<key>name</key>
					<string>constant.numeric.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Valid decimal integers: 1, 0B, 0S, etc.</string>
					<key>match</key>
					<string>(?i)(?&lt;!\.)\b\d+(b|s|u|us|l|ul|ll|ull)?(?!\.)\b</string>
					<key>name</key>
					<string>constant.numeric.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Valid octal integers numbers: '36'o, '36'ol, etc.</string>
					<key>match</key>
					<string>(?i)'[0-7]+'o(b|s|u|us|l|ul|ll|ull)?\b</string>
					<key>name</key>
					<string>constant.numeric.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Valid octal integers: "36, "46l, etc.</string>
					<key>match</key>
					<string>(?i)\"[0-7]+(b|s|u|us|l|ul|ll|ull)?\b</string>
					<key>name</key>
					<string>constant.numeric.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Valid hexadecimal integers: 'AF'x</string>
					<key>match</key>
					<string>(?i)'[0-9a-f]+'x(b|s|u|us|l|ul|ll|ull)?\b</string>
					<key>name</key>
					<string>constant.numeric.idl</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>end</key>
					<string>"|$</string>
					<key>name</key>
					<string>string.quoted.double.idl</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>end</key>
					<string>'|$</string>
					<key>name</key>
					<string>string.quoted.single.idl</string>
				</dict>
			</array>
		</dict>
		<key>variable</key>
		<dict>
			<key>comment</key>
			<string>Valid variable. Added meta to disable highlighting</string>
			<key>match</key>
			<string>\b[_a-zA-Z][_a-zA-Z0-9$]*\b</string>
			<key>name</key>
			<string>meta.variable.other.valid.idl</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.idl</string>
	<key>uuid</key>
	<string>48F8858B-72FF-11D9-BFEE-000D93589AF6</string>
</dict>
</plist>
